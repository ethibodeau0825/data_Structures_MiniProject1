#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using std::vector;
using std::cin;
using std::cout;
using std::priority_queue;


class JobQueue {
private:
    int num_workers_;
    vector<int> jobs_;
    vector<int> assigned_workers_;
    vector<long long> start_times_;

    void WriteResponse() const {
        for (int i = 0; i < jobs_.size(); ++i) {
            cout << assigned_workers_[i] << " " << start_times_[i] << "\n";
        }
    }

    void ReadData() {
        int m;
        cin >> num_workers_ >> m;
        jobs_.resize(m);
        for (int i = 0; i < m; ++i)
            cin >> jobs_[i];
    }

    class NewWorker { 
    public: 
        int i;
        long long free; //so int wont overflow is type long long
        NewWorker(int i) {
            this->i = i;
            free = 0;
        }
    };

    struct pqCompare {
        bool operator()(const NewWorker& x, const NewWorker& y) {
            if (x.free == y.free) {
                return x.i > y.i;
            }
            else {
                return x.free > y.free;
            }
        }
    };

    void AssignJobs() {
        assigned_workers_.resize(jobs_.size());
        start_times_.resize(jobs_.size());
        priority_queue<NewWorker, vector<NewWorker>, pqCompare> pq;//created a priority queue
        for (int i = 0; i < num_workers_; i++) {
            pq.push(NewWorker(i)); // puts each new worker into the heap 

        }
        for (int i = 0; i < jobs_.size(); i++) {
            NewWorker freejob = pq.top();
            pq.pop();
            assigned_workers_[i] = freejob.i;//worker is i the id
            start_times_[i] = freejob.free; //start time is the free 
            //pops the worker and assigns it to top of stack adds the jobs and pushes it 
            freejob.free += jobs_[i];
            pq.push(freejob);
        }
    }

     

public:
    void Solve() {
        ReadData();
        AssignJobs();
        WriteResponse();
    }
};


int main() {
    std::ios_base::sync_with_stdio(false);
    JobQueue job_queue;
    job_queue.Solve();
    return 0;
}
